#!/usr/bin/env node
var app = require('../app')
var debug = require('debug')('app:server')
var http = require('http')
// var models = require("../models");
var configuration = app.get('configuration')
var env = process.env.NODE_ENV || 'development'


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || configuration.api_port || '4000')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

// Sequilizer  config

// models.sequelize.sync().then(function () {
var server = app.listen(app.get('port'),'0.0.0.0', function() {
    console.log("API Server listening on port " +  server.address().port)
    console.log("MODE : " +  env)
    debug('Express server listening on port ' + server.address().port)
})
// });

// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10)

    if (isNaN(port)) {
    // named pipe
        return val
    }

    if (port >= 0) {
    // port number
        return port
    }

    return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }

    var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(bind + ' requires elevated privileges')
        process.exit(1)
        break
    case 'EADDRINUSE':
        console.error(bind + ' is already in use')
        process.exit(1)
        break
    default:
        throw error
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address()
    var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
    console.log("Sever listening on port " + addr.port)
    debug('Listening on ' + bind)
}
